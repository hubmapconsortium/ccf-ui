@use '~@angular/material' as mat;
@use '~@angular/material/theming' as *;

@mixin slider-theme($color, $lightColor) {
  .slider-container {
    .label {
      color: $color;
    }

    .mat-slider.mat-slider-horizontal .mat-slider-wrapper {
      background-color: $lightColor;
    }
    .mat-slider.mat-slider-horizontal .mat-slider-track-background,
    .mat-slider.mat-slider-horizontal .mat-slider-track-fill {
      background-color: $lightColor;
    }
    .mat-accent .mat-slider-thumb {
      background-color: $color;
    }
    .mat-slider-min-value:not(.mat-slider-thumb-label-showing) .mat-slider-thumb {
      background-color: $color;
    }
    .mat-slider.mat-slider-horizontal .mat-slider-thumb-label {
      background-color: $color;
    }
  }
}

@mixin theme($theme) {
  $primary: map-get($theme, primary);
  $foreground: map-get($theme, foreground);
  $background: map-get($theme, background);
  $accent: map-get($theme, accent);

  .ccf-spatial-search-ui {
    background-color: mat.get-color-from-palette($background, modal);
    border-color: mat.get-color-from-palette($foreground, modal-borders);
    color: map-get($foreground, text);

    .header {
      .button {
        color: map-get($foreground, text);
      }

      .info, .close {
        &:hover {
          background-color: mat.get-color-from-palette($background, icon-background-hover2) !important;
        }
      }
    }

    .content {
      .button {
        color: mat.get-color-from-palette($foreground, light-button-text);
        background-color: mat.get-color-from-palette($background, button-bg);
        border-color: mat.get-color-from-palette($foreground, button-border);
    
        &:hover {
          color: mat.get-color-from-palette($foreground, color-hover);
          background-color: mat.get-color-from-palette($background, button-background-hover);
        }
      }
    }

  }

  @include slider-theme(mat.get-color-from-palette($foreground, slider-thumb), mat.get-color-from-palette($foreground, slider));
}
