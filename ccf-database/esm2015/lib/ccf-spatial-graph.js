/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Euler, Matrix4, toDegrees, toRadians } from '@math.gl/core';
import { DirectedGraph } from 'graphology';
import shortestPath from 'graphology-shortest-path/unweighted';
import { get } from 'lodash';
import { readQuads } from 'triple-store-utils';
import { v4 as uuidV4 } from 'uuid';
import { getSpatialPlacement } from './queries/spatial-result-n3';
import { ccf, rdf } from './util/prefixes';
export function applySpatialPlacement(tx, placement) {
    const p = placement;
    let factor;
    switch (p.translation_units) {
        case 'centimeter':
            factor = 1 / 100;
            break;
        case 'millimeter':
            factor = 1 / 1000;
            break;
        case 'meter':
        default:
            factor = 1;
            break;
    }
    const T = [p.x_translation, p.y_translation, p.z_translation].map(t => t * factor);
    const R = [p.x_rotation, p.y_rotation, p.z_rotation].map(toRadians);
    const S = [p.x_scaling, p.y_scaling, p.z_scaling];
    return tx.translate(T).rotateXYZ(R).scale(S);
}
export class CCFSpatialGraph {
    constructor(db) {
        this.db = db;
        this.createGraph();
    }
    createGraph() {
        this.graph = new DirectedGraph();
        const store = this.db.store;
        // Add all Spatial Object References
        store.forSubjects((subject) => {
            this.addNode(subject.id, 'SpatialObjectReference');
        }, rdf.type, ccf.SpatialObjectReference, null);
        // Add all Spatial Entities
        store.forSubjects((subject) => {
            this.addNode(subject.id, 'SpatialEntity');
        }, rdf.type, ccf.SpatialEntity, null);
        // Add all Spatial Placements
        const edgeSource = {};
        for (const quad of readQuads(store, null, ccf.spatialPlacement.source, null, null)) {
            edgeSource[quad.subject.id] = quad.object.id;
        }
        for (const quad of readQuads(store, null, ccf.spatialPlacement.target, null, null)) {
            const source = edgeSource[quad.subject.id];
            if (source) {
                this.addEdge(quad.subject.id, source, quad.object.id, 'SpatialPlacement');
            }
        }
    }
    addNode(id, type) {
        this.graph.mergeNode(id, { type });
    }
    addEdge(id, source, target, type) {
        this.graph.mergeDirectedEdge(source, target, { type, id });
    }
    getTransformationMatrix(sourceIRI, targetIRI) {
        if (sourceIRI === targetIRI) {
            return new Matrix4(Matrix4.IDENTITY); // identity
        }
        if (!this.graph.hasNode(sourceIRI) || !this.graph.hasNode(targetIRI)) {
            return undefined;
        }
        const store = this.db.store;
        const tx = new Matrix4(Matrix4.IDENTITY);
        const path = shortestPath(this.graph, sourceIRI, targetIRI);
        if (path && path.length > 0) {
            path.reverse();
            let target = '';
            for (const source of path) {
                if (target) {
                    const placementId = this.graph.getEdgeAttribute(source, target, 'id');
                    const placement = getSpatialPlacement(store, placementId);
                    applySpatialPlacement(tx, placement);
                }
                target = source;
            }
            return tx;
        }
        else {
            return undefined;
        }
    }
    getSpatialPlacement(source, targetIri) {
        const sourceIri = this.graph.hasNode(source['@id']) ? source['@id'] : undefined;
        const placement = get(source, 'placement[0]', get(source, 'placement', undefined));
        let matrix;
        if (placement && this.graph.hasNode(placement.target)) {
            matrix = this.getTransformationMatrix(placement.target, targetIri);
            if (matrix) {
                matrix = applySpatialPlacement(matrix, placement);
            }
        }
        else if (sourceIri) {
            matrix = this.getTransformationMatrix(sourceIri, targetIri);
        }
        if (matrix) {
            const euler = new Euler().fromRotationMatrix(matrix, Euler.XYZ);
            const T = matrix.getTranslation().map(n => n * 1000);
            const R = euler.toVector3().map(toDegrees);
            const S = matrix.getScale().map(n => n < 1 && n > 0.999999 ? 1 : n);
            return {
                '@context': 'https://hubmapconsortium.github.io/hubmap-ontology/ccf-context.jsonld',
                '@id': `http://purl.org/ccf/1.5/${uuidV4()}_placement`,
                '@type': 'SpatialPlacement',
                source: source['@id'],
                target: targetIri,
                placement_date: new Date().toISOString().split('T')[0],
                x_scaling: S[0],
                y_scaling: S[1],
                z_scaling: S[2],
                scaling_units: 'ratio',
                x_rotation: R[0],
                y_rotation: R[1],
                z_rotation: R[2],
                rotation_order: 'XYZ',
                rotation_units: 'degree',
                x_translation: T[0],
                y_translation: T[1],
                z_translation: T[2],
                translation_units: 'millimeter'
            };
        }
        else {
            return undefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,