import { memoize } from 'lodash';
import { readQuads } from 'triple-store-utils';
import { getEntries } from '../util/n3-functions';
import { ccf, rui } from '../util/prefixes';
export function getOntologyTreeNode(store, iri, relationshipIri) {
    const result = {
        '@id': iri, '@type': 'OntologyTreeNode', id: iri, parent: '',
        children: [], synonymLabels: [], label: ''
    };
    const ontologyTreeNodeResult = {
        [ccf.ontologyNode.label.id]: 'label',
        [relationshipIri]: 'parent',
        [ccf.ontologyNode.synonymLabels.id]: 'synonymLabels',
    };
    for (const [key, value] of getEntries(store, iri, ontologyTreeNodeResult)) {
        if (key === 'synonymLabels') {
            result.synonymLabels.push(value);
        }
        else {
            result[key] = value;
        }
    }
    result.children = store.getSubjects(relationshipIri, iri, null).map(s => s.id);
    return result;
}
export function getOntologyTreeModel(store, rootIri, rootLabel, relationshipIri) {
    const result = { root: rootIri, nodes: {} };
    const seen = new Set();
    for (const quad of readQuads(store, null, relationshipIri, null, null)) {
        seen.add(quad.subject.id);
        seen.add(quad.object.id);
    }
    for (const iri of seen) {
        result.nodes[iri] = getOntologyTreeNode(store, iri, relationshipIri);
    }
    if (!result.nodes[rootIri]) {
        result.nodes[rootIri] = {
            '@id': rootIri,
            '@type': 'OntologyTreeNode',
            id: rootIri,
            label: rootLabel,
            children: [],
            synonymLabels: []
        };
    }
    const rootChildren = store
        .getSubjects(relationshipIri, rootIri, null).map(o => o.id)
        .sort((a, b) => result.nodes[a].label.localeCompare(result.nodes[b].label));
    result.nodes[rootIri].children = rootChildren;
    treeify(result);
    return result;
}
/**
 * Recursive function to ensure that the given ontology tree model is actually a tree by essentially using a BFS search.
 *
 * @param model the ontology tree model to mutate
 * @param nodeIri the tree node iri to modify. Starts at root in the base case
 * @param seen a set of IRIs that have been 'seen' so far to remove loops in the graph
 */
function treeify(model, nodeIri = undefined, seen = new Set()) {
    const node = model.nodes[nodeIri !== null && nodeIri !== void 0 ? nodeIri : model.root];
    if (node) {
        node.children = node.children.filter(n => !seen.has(n));
        node.children.forEach(n => seen.add(n));
        for (const childId of node.children) {
            treeify(model, childId, seen);
            if (model.nodes[childId]) {
                model.nodes[childId].parent = node['@id'];
            }
        }
    }
}
export function getAnatomicalStructureTreeModelSlowly(store) {
    const model = getOntologyTreeModel(store, rui.body.id, 'body', ccf.asctb.part_of.id);
    model.nodes[rui.body.id].children = [
        'http://purl.obolibrary.org/obo/UBERON_0000955',
        'http://purl.obolibrary.org/obo/UBERON_0000029',
        // 'http://purl.obolibrary.org/obo/UBERON_0002509', // Mesenteric Lymph Node
        'http://purl.obolibrary.org/obo/UBERON_0000970',
        // 'http://purl.obolibrary.org/obo/UBERON_0004548', // Eye, L
        // 'http://purl.org/sig/ont/fma/fma54449', // Eye, R
        'http://purl.obolibrary.org/obo/UBERON_0003889',
        // 'http://purl.obolibrary.org/obo/UBERON_0001303', // Fallopian Tube, L
        // 'http://purl.obolibrary.org/obo/UBERON_0001302', // Fallopian Tube, R
        'http://purl.obolibrary.org/obo/UBERON_0000948',
        'http://purl.obolibrary.org/obo/UBERON_0002113',
        // 'http://purl.obolibrary.org/obo/UBERON_0004538', // Kidney, L
        // 'http://purl.obolibrary.org/obo/UBERON_0004539', // Kidney, R
        'http://purl.obolibrary.org/obo/UBERON_0001465',
        // 'http://purl.org/sig/ont/fma/fma24978', // Knee, L
        // 'http://purl.org/sig/ont/fma/fma24977', // Knee, R
        'http://purl.obolibrary.org/obo/UBERON_0002107',
        'http://purl.obolibrary.org/obo/UBERON_0002048',
        'http://purl.obolibrary.org/obo/UBERON_0001911',
        // 'http://purl.org/sig/ont/fma/fma57991', // Mammary Gland, L
        // 'http://purl.org/sig/ont/fma/fma57987', // Mammary Gland, R
        'http://purl.obolibrary.org/obo/UBERON_0000992',
        // 'http://purl.org/sig/ont/fma/fma7214', // Ovary, L
        // 'http://purl.org/sig/ont/fma/fma7213', // Ovary, R
        'http://purl.obolibrary.org/obo/UBERON_0001264',
        'http://purl.obolibrary.org/obo/UBERON_0001270',
        'http://purl.obolibrary.org/obo/UBERON_0001987',
        'http://purl.obolibrary.org/obo/UBERON_0002367',
        'http://purl.obolibrary.org/obo/UBERON_0002097',
        'http://purl.obolibrary.org/obo/UBERON_0002108',
        'http://purl.obolibrary.org/obo/UBERON_0002240',
        'http://purl.obolibrary.org/obo/UBERON_0000059',
        'http://purl.obolibrary.org/obo/UBERON_0002106',
        'http://purl.obolibrary.org/obo/UBERON_0002370',
        'http://purl.obolibrary.org/obo/UBERON_0000056',
        // 'http://purl.obolibrary.org/obo/UBERON_0001223', // Ureter, L
        // 'http://purl.obolibrary.org/obo/UBERON_0001222', // Ureter, R
        'http://purl.obolibrary.org/obo/UBERON_0001255',
        'http://purl.obolibrary.org/obo/UBERON_0000995',
        'http://purl.obolibrary.org/obo/UBERON_0004537' // Blood Vasculature
    ].filter(iri => iri in model.nodes);
    return model;
}
export const getAnatomicalStructureTreeModel = memoize(getAnatomicalStructureTreeModelSlowly, () => '');
export function getCellTypeTreeModel(store) {
    return getOntologyTreeModel(store, rui.cell.id, 'cell', ccf.asctb.ct_is_a.id);
}
//# sourceMappingURL=data:application/json;base64,