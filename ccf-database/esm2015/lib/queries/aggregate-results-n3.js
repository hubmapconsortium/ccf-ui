/* eslint-disable @typescript-eslint/naming-convention */
import { readQuads } from 'triple-store-utils';
import { entity } from '../util/prefixes';
function getObjects(store, ids, predicate) {
    const objects = new Set();
    for (const id of ids) {
        for (const quad of readQuads(store, id, predicate, null, null)) {
            objects.add(quad.object.id);
        }
    }
    return objects;
}
/**
 * Computes aggregate results.
 *
 * @param ids Ids of objects to calculate aggregate over.
 * @param store The triple store.
 * @returns The list of aggregate results.
 */
export function getAggregateResults(ids, store) {
    const donors = getObjects(store, ids, entity.donor.id);
    const centers = getObjects(store, donors, entity.providerUUID.id);
    const tissueBlocks = new Set();
    for (const id of ids) {
        for (const quad of readQuads(store, id, entity.spatialEntity, null, null)) {
            tissueBlocks.add(quad.subject.id);
        }
    }
    const tissueSections = getObjects(store, tissueBlocks, entity.sections.id);
    const tissueDatasets = new Set([
        ...getObjects(store, tissueBlocks, entity.datasets.id),
        ...getObjects(store, tissueSections, entity.datasets.id)
    ]);
    const results = {
        'Tissue Data Providers': centers.size,
        Donors: donors.size,
        'Tissue Blocks': tissueBlocks.size,
        'Tissue Sections': tissueSections.size,
        'Tissue Datasets': tissueDatasets.size
    };
    return Object.entries(results).map(([label, count]) => ({ label, count }));
}
/**
 * Get a list of technology names used by datasets
 *
 * @param store The triple store.
 * @returns list of unique technology names in the data
 */
export function getDatasetTechnologyNames(store) {
    const names = new Set();
    for (const quad of readQuads(store, null, entity.technology, null, null)) {
        names.add(quad.object.value);
    }
    return Array.from(names).sort();
}
/**
 * Get a list of provider names from the database
 *
 * @param store The triple store.
 * @returns list of unique provider names in the data
 */
export function getProviderNames(store) {
    const names = new Set();
    for (const quad of readQuads(store, null, entity.providerName, null, null)) {
        names.add(quad.object.value);
    }
    return Array.from(names).sort();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLXJlc3VsdHMtbjMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2YtZGF0YWJhc2Uvc3JjL2xpYi9xdWVyaWVzL2FnZ3JlZ2F0ZS1yZXN1bHRzLW4zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDtBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFHdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzFDLFNBQVMsVUFBVSxDQUFDLEtBQVksRUFBRSxHQUFnQixFQUFFLFNBQWlCO0lBQ25FLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFDbEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUU7UUFDcEIsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM3QjtLQUNGO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFnQixFQUFFLEtBQVk7SUFDaEUsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxFLE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFDdkMsS0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUU7UUFDcEIsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUN6RSxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbkM7S0FDRjtJQUVELE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0UsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQVM7UUFDckMsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN0RCxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0tBQ3pELENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxHQUE4QjtRQUN6Qyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsSUFBSTtRQUNyQyxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUk7UUFDbkIsZUFBZSxFQUFFLFlBQVksQ0FBQyxJQUFJO1FBQ2xDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxJQUFJO1FBQ3RDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxJQUFJO0tBQ3ZDLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxLQUFZO0lBQ3BELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7SUFDaEMsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtRQUN4RSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEtBQVk7SUFDM0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUNoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQzFFLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5pbXBvcnQgeyByZWFkUXVhZHMsIFN0b3JlIH0gZnJvbSAndHJpcGxlLXN0b3JlLXV0aWxzJztcblxuaW1wb3J0IHsgQWdncmVnYXRlUmVzdWx0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBlbnRpdHkgfSBmcm9tICcuLi91dGlsL3ByZWZpeGVzJztcblxuXG5mdW5jdGlvbiBnZXRPYmplY3RzKHN0b3JlOiBTdG9yZSwgaWRzOiBTZXQ8c3RyaW5nPiwgcHJlZGljYXRlOiBzdHJpbmcpOiBTZXQ8c3RyaW5nPiB7XG4gIGNvbnN0IG9iamVjdHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICBmb3IgKGNvbnN0IHF1YWQgb2YgcmVhZFF1YWRzKHN0b3JlLCBpZCwgcHJlZGljYXRlLCBudWxsLCBudWxsKSkge1xuICAgICAgb2JqZWN0cy5hZGQocXVhZC5vYmplY3QuaWQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0cztcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhZ2dyZWdhdGUgcmVzdWx0cy5cbiAqXG4gKiBAcGFyYW0gaWRzIElkcyBvZiBvYmplY3RzIHRvIGNhbGN1bGF0ZSBhZ2dyZWdhdGUgb3Zlci5cbiAqIEBwYXJhbSBzdG9yZSBUaGUgdHJpcGxlIHN0b3JlLlxuICogQHJldHVybnMgVGhlIGxpc3Qgb2YgYWdncmVnYXRlIHJlc3VsdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZ2dyZWdhdGVSZXN1bHRzKGlkczogU2V0PHN0cmluZz4sIHN0b3JlOiBTdG9yZSk6IEFnZ3JlZ2F0ZVJlc3VsdFtdIHtcbiAgY29uc3QgZG9ub3JzID0gZ2V0T2JqZWN0cyhzdG9yZSwgaWRzLCBlbnRpdHkuZG9ub3IuaWQpO1xuICBjb25zdCBjZW50ZXJzID0gZ2V0T2JqZWN0cyhzdG9yZSwgZG9ub3JzLCBlbnRpdHkucHJvdmlkZXJVVUlELmlkKTtcblxuICBjb25zdCB0aXNzdWVCbG9ja3MgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICBmb3IgKGNvbnN0IHF1YWQgb2YgcmVhZFF1YWRzKHN0b3JlLCBpZCwgZW50aXR5LnNwYXRpYWxFbnRpdHksIG51bGwsIG51bGwpKSB7XG4gICAgICB0aXNzdWVCbG9ja3MuYWRkKHF1YWQuc3ViamVjdC5pZCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGlzc3VlU2VjdGlvbnMgPSBnZXRPYmplY3RzKHN0b3JlLCB0aXNzdWVCbG9ja3MsIGVudGl0eS5zZWN0aW9ucy5pZCk7XG4gIGNvbnN0IHRpc3N1ZURhdGFzZXRzID0gbmV3IFNldDxzdHJpbmc+KFtcbiAgICAuLi5nZXRPYmplY3RzKHN0b3JlLCB0aXNzdWVCbG9ja3MsIGVudGl0eS5kYXRhc2V0cy5pZCksXG4gICAgLi4uZ2V0T2JqZWN0cyhzdG9yZSwgdGlzc3VlU2VjdGlvbnMsIGVudGl0eS5kYXRhc2V0cy5pZClcbiAgXSk7XG5cbiAgY29uc3QgcmVzdWx0czogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcbiAgICAnVGlzc3VlIERhdGEgUHJvdmlkZXJzJzogY2VudGVycy5zaXplLFxuICAgIERvbm9yczogZG9ub3JzLnNpemUsXG4gICAgJ1Rpc3N1ZSBCbG9ja3MnOiB0aXNzdWVCbG9ja3Muc2l6ZSxcbiAgICAnVGlzc3VlIFNlY3Rpb25zJzogdGlzc3VlU2VjdGlvbnMuc2l6ZSxcbiAgICAnVGlzc3VlIERhdGFzZXRzJzogdGlzc3VlRGF0YXNldHMuc2l6ZVxuICB9O1xuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhyZXN1bHRzKS5tYXAoKFtsYWJlbCwgY291bnRdKSA9PiAoeyBsYWJlbCwgY291bnQgfSkpO1xufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgdGVjaG5vbG9neSBuYW1lcyB1c2VkIGJ5IGRhdGFzZXRzXG4gKlxuICogQHBhcmFtIHN0b3JlIFRoZSB0cmlwbGUgc3RvcmUuXG4gKiBAcmV0dXJucyBsaXN0IG9mIHVuaXF1ZSB0ZWNobm9sb2d5IG5hbWVzIGluIHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhc2V0VGVjaG5vbG9neU5hbWVzKHN0b3JlOiBTdG9yZSk6IHN0cmluZ1tdIHtcbiAgY29uc3QgbmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCBxdWFkIG9mIHJlYWRRdWFkcyhzdG9yZSwgbnVsbCwgZW50aXR5LnRlY2hub2xvZ3ksIG51bGwsIG51bGwpKSB7XG4gICAgbmFtZXMuYWRkKHF1YWQub2JqZWN0LnZhbHVlKTtcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShuYW1lcykuc29ydCgpO1xufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgcHJvdmlkZXIgbmFtZXMgZnJvbSB0aGUgZGF0YWJhc2VcbiAqXG4gKiBAcGFyYW0gc3RvcmUgVGhlIHRyaXBsZSBzdG9yZS5cbiAqIEByZXR1cm5zIGxpc3Qgb2YgdW5pcXVlIHByb3ZpZGVyIG5hbWVzIGluIHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm92aWRlck5hbWVzKHN0b3JlOiBTdG9yZSk6IHN0cmluZ1tdIHtcbiAgY29uc3QgbmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCBxdWFkIG9mIHJlYWRRdWFkcyhzdG9yZSwgbnVsbCwgZW50aXR5LnByb3ZpZGVyTmFtZSwgbnVsbCwgbnVsbCkpIHtcbiAgICBuYW1lcy5hZGQocXVhZC5vYmplY3QudmFsdWUpO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKG5hbWVzKS5zb3J0KCk7XG59XG4iXX0=