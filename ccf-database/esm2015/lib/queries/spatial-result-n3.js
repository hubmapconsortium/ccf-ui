import { sortBy } from 'lodash';
import { DataFactory } from 'triple-store-utils';
import { getMappedResult } from '../util/n3-functions';
import { ccf, entity } from '../util/prefixes';
/**
 * Reverses the keys and values in a mapping.
 *
 * @param mapping The mapping to reverse.
 * @returns The reversed mapping.
 */
function reverseMapping(mapping) {
    const newMapping = {};
    Object.entries(mapping).forEach(([prop, predicate]) => {
        newMapping[predicate.id] = prop;
    });
    return newMapping;
}
/** A mapping of spatial objects. */
const mappings = {
    spatialObjectReference: reverseMapping(ccf.spatialObjectReference),
    spatialEntity: reverseMapping(ccf.spatialEntity),
    spatialPlacement: reverseMapping(ccf.spatialPlacement)
};
/**
 * Creates a spatial object reference.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @returns The new reference.
 */
export function getSpatialObjectReference(store, iri) {
    return getMappedResult(store, iri, 'SpatialObjectReference', mappings.spatialObjectReference);
}
/**
 * Creates an extraction set data object.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @returns The new entity.
 */
export function getExtractionSet(store, iri) {
    const result = getMappedResult(store, iri, 'ExtractionSet', mappings.spatialEntity);
    result.extractionSites = sortBy(store.getSubjects(ccf.spatialEntity.extraction_set, iri, null)
        .map((value) => getSpatialEntity(store, value.id)), ['rui_rank']);
    return result;
}
/**
 * Gets extraction sets associated with a reference organ
 *
 * @param store The triple store.
 * @param iri The data identifier (the reference organ).
 * @returns A set of extraction sets associated with the reference organ
 */
export function getExtractionSets(store, iri) {
    return sortBy(store.getSubjects(ccf.spatialEntity.extraction_set_for, iri, null)
        .map((value) => getExtractionSet(store, value.id)), ['rui_rank']);
}
/**
 * Gets the anatomical structures associated with a reference organ.
 *
 * @param store The triple store.
 * @param iri The data identifier (reference organ).
 * @returns The new entity.
 */
export function getAnatomicalStructures(store, iri) {
    return sortBy(store.getSubjects(ccf.spatialEntity.reference_organ, iri, null)
        .map((value) => getSpatialEntity(store, value.id))
        .filter((e) => e['@id'] !== iri), ['rui_rank']);
}
/**
 * Gets all reference organs in the triple store
 *
 * @param store The triple store.
 * @returns All the reference organs.
 */
export function getReferenceOrgans(store) {
    const results = [];
    store.forEach((quad) => {
        if (quad.subject.id === quad.object.id) {
            results.push(getSpatialEntity(store, quad.subject.id));
        }
    }, null, ccf.spatialEntity.reference_organ, null, null);
    return sortBy(results, ['rui_rank']);
}
/**
 * Creates a spatial entity data object.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @returns The new entity.
 */
export function getSpatialEntity(store, iri) {
    const result = getMappedResult(store, iri, 'SpatialEntity', mappings.spatialEntity);
    // Default mapping will come back as an IRI which we can look up for the full object
    if (result.object) {
        result.object = getSpatialObjectReference(store, result.object);
    }
    if (result.ccf_annotations) {
        result.ccf_annotations = store.getObjects(iri, ccf.spatialEntity.ccf_annotations, null).map(o => o.id);
    }
    store.forSubjects((subject) => (result.entityId = subject.id), entity.spatialEntity, iri, null);
    return result;
}
/**
 * Creates a spatial placement object.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @returns THe new placement object.
 */
export function getSpatialPlacement(store, iri) {
    const result = getMappedResult(store, iri, 'SpatialPlacement', mappings.spatialPlacement);
    // Default mapping will come back as an IRI for source/target which we can look up for the full object
    if (result.source) {
        result.source = getSpatialEntity(store, result.source);
    }
    if (result.target) {
        result.target = getSpatialEntity(store, result.target);
    }
    return result;
}
/**
 * Creates a spatial entity based on another entity in the store.
 *
 * @param store The triple store.
 * @param entityIRI The indentifier of the store entity.
 * @returns A new entity.
 */
export function getSpatialEntityForEntity(store, entityIRI) {
    const spatialEntityNodes = store.getObjects(DataFactory.namedNode(entityIRI), entity.spatialEntity, null);
    if (spatialEntityNodes.length > 0) {
        return getSpatialEntity(store, spatialEntityNodes[0].id);
    }
    else {
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhdGlhbC1yZXN1bHQtbjMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2YtZGF0YWJhc2Uvc3JjL2xpYi9xdWVyaWVzL3NwYXRpYWwtcmVzdWx0LW4zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUduRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQzs7Ozs7R0FLRztBQUNILFNBQVMsY0FBYyxDQUFDLE9BQTBDO0lBQ2hFLE1BQU0sVUFBVSxHQUE4QixFQUFFLENBQUM7SUFDakQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFO1FBQ3BELFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELG9DQUFvQztBQUNwQyxNQUFNLFFBQVEsR0FBRztJQUNmLHNCQUFzQixFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7SUFDbEUsYUFBYSxFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO0lBQ2hELGdCQUFnQixFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7Q0FDdkQsQ0FBQztBQUVGOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxLQUFZLEVBQUUsR0FBVztJQUNqRSxPQUFPLGVBQWUsQ0FBeUIsS0FBSyxFQUFFLEdBQUcs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LENBQUMsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFHLElBQUksa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNqQyxPQUFPLGdCQUFnQixDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMxRDtTQUFNO1FBQ0wsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc29ydEJ5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IERhdGFGYWN0b3J5LCBOYW1lZE5vZGUsIFN0b3JlIH0gZnJvbSAndHJpcGxlLXN0b3JlLXV0aWxzJztcblxuaW1wb3J0IHsgU3BhdGlhbEVudGl0eSwgU3BhdGlhbE9iamVjdFJlZmVyZW5jZSwgU3BhdGlhbFBsYWNlbWVudCwgRXh0cmFjdGlvblNldCB9IGZyb20gJy4uL3NwYXRpYWwtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0TWFwcGVkUmVzdWx0IH0gZnJvbSAnLi4vdXRpbC9uMy1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgY2NmLCBlbnRpdHkgfSBmcm9tICcuLi91dGlsL3ByZWZpeGVzJztcblxuXG4vKipcbiAqIFJldmVyc2VzIHRoZSBrZXlzIGFuZCB2YWx1ZXMgaW4gYSBtYXBwaW5nLlxuICpcbiAqIEBwYXJhbSBtYXBwaW5nIFRoZSBtYXBwaW5nIHRvIHJldmVyc2UuXG4gKiBAcmV0dXJucyBUaGUgcmV2ZXJzZWQgbWFwcGluZy5cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZU1hcHBpbmcobWFwcGluZzogeyBbcHJvcGVydHk6IHN0cmluZ106IE5hbWVkTm9kZSB9KTogeyBbaXJpOiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gIGNvbnN0IG5ld01hcHBpbmc6IHsgW2lyaTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbiAgT2JqZWN0LmVudHJpZXMobWFwcGluZykuZm9yRWFjaCgoW3Byb3AsIHByZWRpY2F0ZV0pID0+IHtcbiAgICBuZXdNYXBwaW5nW3ByZWRpY2F0ZS5pZF0gPSBwcm9wO1xuICB9KTtcbiAgcmV0dXJuIG5ld01hcHBpbmc7XG59XG5cbi8qKiBBIG1hcHBpbmcgb2Ygc3BhdGlhbCBvYmplY3RzLiAqL1xuY29uc3QgbWFwcGluZ3MgPSB7XG4gIHNwYXRpYWxPYmplY3RSZWZlcmVuY2U6IHJldmVyc2VNYXBwaW5nKGNjZi5zcGF0aWFsT2JqZWN0UmVmZXJlbmNlKSxcbiAgc3BhdGlhbEVudGl0eTogcmV2ZXJzZU1hcHBpbmcoY2NmLnNwYXRpYWxFbnRpdHkpLFxuICBzcGF0aWFsUGxhY2VtZW50OiByZXZlcnNlTWFwcGluZyhjY2Yuc3BhdGlhbFBsYWNlbWVudClcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwYXRpYWwgb2JqZWN0IHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0gc3RvcmUgVGhlIHRyaXBsZSBzdG9yZS5cbiAqIEBwYXJhbSBpcmkgVGhlIGRhdGEgaWRlbnRpZmllci5cbiAqIEByZXR1cm5zIFRoZSBuZXcgcmVmZXJlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhdGlhbE9iamVjdFJlZmVyZW5jZShzdG9yZTogU3RvcmUsIGlyaTogc3RyaW5nKTogU3BhdGlhbE9iamVjdFJlZmVyZW5jZSB7XG4gIHJldHVybiBnZXRNYXBwZWRSZXN1bHQ8U3BhdGlhbE9iamVjdFJlZmVyZW5jZT4oc3RvcmUsIGlyaSwgJ1NwYXRpYWxPYmplY3RSZWZlcmVuY2UnLCBtYXBwaW5ncy5zcGF0aWFsT2JqZWN0UmVmZXJlbmNlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGV4dHJhY3Rpb24gc2V0IGRhdGEgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBzdG9yZSBUaGUgdHJpcGxlIHN0b3JlLlxuICogQHBhcmFtIGlyaSBUaGUgZGF0YSBpZGVudGlmaWVyLlxuICogQHJldHVybnMgVGhlIG5ldyBlbnRpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRyYWN0aW9uU2V0KHN0b3JlOiBTdG9yZSwgaXJpOiBzdHJpbmcpOiBFeHRyYWN0aW9uU2V0IHtcbiAgY29uc3QgcmVzdWx0ID0gZ2V0TWFwcGVkUmVzdWx0PEV4dHJhY3Rpb25TZXQ+KHN0b3JlLCBpcmksICdFeHRyYWN0aW9uU2V0JywgbWFwcGluZ3Muc3BhdGlhbEVudGl0eSk7XG4gIHJlc3VsdC5leHRyYWN0aW9uU2l0ZXMgPSBzb3J0QnkoXG4gICAgc3RvcmUuZ2V0U3ViamVjdHMoY2NmLnNwYXRpYWxFbnRpdHkuZXh0cmFjdGlvbl9zZXQsIGlyaSwgbnVsbClcbiAgICAgIC5tYXAoKHZhbHVlKSA9PiBnZXRTcGF0aWFsRW50aXR5KHN0b3JlLCB2YWx1ZS5pZCkpLFxuICAgIFsncnVpX3JhbmsnXSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyBleHRyYWN0aW9uIHNldHMgYXNzb2NpYXRlZCB3aXRoIGEgcmVmZXJlbmNlIG9yZ2FuXG4gKlxuICogQHBhcmFtIHN0b3JlIFRoZSB0cmlwbGUgc3RvcmUuXG4gKiBAcGFyYW0gaXJpIFRoZSBkYXRhIGlkZW50aWZpZXIgKHRoZSByZWZlcmVuY2Ugb3JnYW4pLlxuICogQHJldHVybnMgQSBzZXQgb2YgZXh0cmFjdGlvbiBzZXRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVmZXJlbmNlIG9yZ2FuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRyYWN0aW9uU2V0cyhzdG9yZTogU3RvcmUsIGlyaTogc3RyaW5nKTogRXh0cmFjdGlvblNldFtdIHtcbiAgcmV0dXJuIHNvcnRCeShcbiAgICBzdG9yZS5nZXRTdWJqZWN0cyhjY2Yuc3BhdGlhbEVudGl0eS5leHRyYWN0aW9uX3NldF9mb3IsIGlyaSwgbnVsbClcbiAgICAgIC5tYXAoKHZhbHVlKSA9PiBnZXRFeHRyYWN0aW9uU2V0KHN0b3JlLCB2YWx1ZS5pZCkpLFxuICAgIFsncnVpX3JhbmsnXVxuICApO1xufVxuXG5cbi8qKlxuICogR2V0cyB0aGUgYW5hdG9taWNhbCBzdHJ1Y3R1cmVzIGFzc29jaWF0ZWQgd2l0aCBhIHJlZmVyZW5jZSBvcmdhbi5cbiAqXG4gKiBAcGFyYW0gc3RvcmUgVGhlIHRyaXBsZSBzdG9yZS5cbiAqIEBwYXJhbSBpcmkgVGhlIGRhdGEgaWRlbnRpZmllciAocmVmZXJlbmNlIG9yZ2FuKS5cbiAqIEByZXR1cm5zIFRoZSBuZXcgZW50aXR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5hdG9taWNhbFN0cnVjdHVyZXMoc3RvcmU6IFN0b3JlLCBpcmk6IHN0cmluZyk6IFNwYXRpYWxFbnRpdHlbXSB7XG4gIHJldHVybiBzb3J0QnkoXG4gICAgc3RvcmUuZ2V0U3ViamVjdHMoY2NmLnNwYXRpYWxFbnRpdHkucmVmZXJlbmNlX29yZ2FuLCBpcmksIG51bGwpXG4gICAgICAubWFwKCh2YWx1ZSkgPT4gZ2V0U3BhdGlhbEVudGl0eShzdG9yZSwgdmFsdWUuaWQpKVxuICAgICAgLmZpbHRlcigoZSkgPT4gZVsnQGlkJ10gIT09IGlyaSksXG4gICAgWydydWlfcmFuayddXG4gICk7XG59XG5cbi8qKlxuICogR2V0cyBhbGwgcmVmZXJlbmNlIG9yZ2FucyBpbiB0aGUgdHJpcGxlIHN0b3JlXG4gKlxuICogQHBhcmFtIHN0b3JlIFRoZSB0cmlwbGUgc3RvcmUuXG4gKiBAcmV0dXJucyBBbGwgdGhlIHJlZmVyZW5jZSBvcmdhbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWZlcmVuY2VPcmdhbnMoc3RvcmU6IFN0b3JlKTogU3BhdGlhbEVudGl0eVtdIHtcbiAgY29uc3QgcmVzdWx0czogU3BhdGlhbEVudGl0eVtdID0gW107XG4gIHN0b3JlLmZvckVhY2goKHF1YWQpID0+IHtcbiAgICBpZiAocXVhZC5zdWJqZWN0LmlkID09PSBxdWFkLm9iamVjdC5pZCkge1xuICAgICAgcmVzdWx0cy5wdXNoKGdldFNwYXRpYWxFbnRpdHkoc3RvcmUsIHF1YWQuc3ViamVjdC5pZCkpO1xuICAgIH1cbiAgfSwgbnVsbCwgY2NmLnNwYXRpYWxFbnRpdHkucmVmZXJlbmNlX29yZ2FuLCBudWxsLCBudWxsKTtcbiAgcmV0dXJuIHNvcnRCeShyZXN1bHRzLCBbJ3J1aV9yYW5rJ10pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzcGF0aWFsIGVudGl0eSBkYXRhIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gc3RvcmUgVGhlIHRyaXBsZSBzdG9yZS5cbiAqIEBwYXJhbSBpcmkgVGhlIGRhdGEgaWRlbnRpZmllci5cbiAqIEByZXR1cm5zIFRoZSBuZXcgZW50aXR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhdGlhbEVudGl0eShzdG9yZTogU3RvcmUsIGlyaTogc3RyaW5nKTogU3BhdGlhbEVudGl0eSB7XG4gIGNvbnN0IHJlc3VsdCA9IGdldE1hcHBlZFJlc3VsdDxTcGF0aWFsRW50aXR5PihzdG9yZSwgaXJpLCAnU3BhdGlhbEVudGl0eScsIG1hcHBpbmdzLnNwYXRpYWxFbnRpdHkpO1xuICAvLyBEZWZhdWx0IG1hcHBpbmcgd2lsbCBjb21lIGJhY2sgYXMgYW4gSVJJIHdoaWNoIHdlIGNhbiBsb29rIHVwIGZvciB0aGUgZnVsbCBvYmplY3RcbiAgaWYgKHJlc3VsdC5vYmplY3QpIHtcbiAgICByZXN1bHQub2JqZWN0ID0gZ2V0U3BhdGlhbE9iamVjdFJlZmVyZW5jZShzdG9yZSwgKHJlc3VsdC5vYmplY3QgYXMgdW5rbm93bikgYXMgc3RyaW5nKTtcbiAgfVxuICBpZiAocmVzdWx0LmNjZl9hbm5vdGF0aW9ucykge1xuICAgIHJlc3VsdC5jY2ZfYW5ub3RhdGlvbnMgPSBzdG9yZS5nZXRPYmplY3RzKGlyaSwgY2NmLnNwYXRpYWxFbnRpdHkuY2NmX2Fubm90YXRpb25zLCBudWxsKS5tYXAobyA9PiBvLmlkKTtcbiAgfVxuICBzdG9yZS5mb3JTdWJqZWN0cygoc3ViamVjdCkgPT4gKHJlc3VsdC5lbnRpdHlJZCA9IHN1YmplY3QuaWQpLCBlbnRpdHkuc3BhdGlhbEVudGl0eSwgaXJpLCBudWxsKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3BhdGlhbCBwbGFjZW1lbnQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBzdG9yZSBUaGUgdHJpcGxlIHN0b3JlLlxuICogQHBhcmFtIGlyaSBUaGUgZGF0YSBpZGVudGlmaWVyLlxuICogQHJldHVybnMgVEhlIG5ldyBwbGFjZW1lbnQgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BhdGlhbFBsYWNlbWVudChzdG9yZTogU3RvcmUsIGlyaTogc3RyaW5nKTogU3BhdGlhbFBsYWNlbWVudCB7XG4gIGNvbnN0IHJlc3VsdCA9IGdldE1hcHBlZFJlc3VsdDxTcGF0aWFsUGxhY2VtZW50PihzdG9yZSwgaXJpLCAnU3BhdGlhbFBsYWNlbWVudCcsIG1hcHBpbmdzLnNwYXRpYWxQbGFjZW1lbnQpO1xuICAvLyBEZWZhdWx0IG1hcHBpbmcgd2lsbCBjb21lIGJhY2sgYXMgYW4gSVJJIGZvciBzb3VyY2UvdGFyZ2V0IHdoaWNoIHdlIGNhbiBsb29rIHVwIGZvciB0aGUgZnVsbCBvYmplY3RcbiAgaWYgKHJlc3VsdC5zb3VyY2UpIHtcbiAgICByZXN1bHQuc291cmNlID0gZ2V0U3BhdGlhbEVudGl0eShzdG9yZSwgKHJlc3VsdC5zb3VyY2UgYXMgdW5rbm93bikgYXMgc3RyaW5nKTtcbiAgfVxuICBpZiAocmVzdWx0LnRhcmdldCkge1xuICAgIHJlc3VsdC50YXJnZXQgPSBnZXRTcGF0aWFsRW50aXR5KHN0b3JlLCAocmVzdWx0LnRhcmdldCBhcyB1bmtub3duKSBhcyBzdHJpbmcpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNwYXRpYWwgZW50aXR5IGJhc2VkIG9uIGFub3RoZXIgZW50aXR5IGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gc3RvcmUgVGhlIHRyaXBsZSBzdG9yZS5cbiAqIEBwYXJhbSBlbnRpdHlJUkkgVGhlIGluZGVudGlmaWVyIG9mIHRoZSBzdG9yZSBlbnRpdHkuXG4gKiBAcmV0dXJucyBBIG5ldyBlbnRpdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGF0aWFsRW50aXR5Rm9yRW50aXR5KHN0b3JlOiBTdG9yZSwgZW50aXR5SVJJOiBzdHJpbmcpOiBTcGF0aWFsRW50aXR5IHwgdW5kZWZpbmVkIHtcbiAgY29uc3Qgc3BhdGlhbEVudGl0eU5vZGVzID0gc3RvcmUuZ2V0T2JqZWN0cyhEYXRhRmFjdG9yeS5uYW1lZE5vZGUoZW50aXR5SVJJKSwgZW50aXR5LnNwYXRpYWxFbnRpdHksIG51bGwpO1xuICBpZiAoc3BhdGlhbEVudGl0eU5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gZ2V0U3BhdGlhbEVudGl0eShzdG9yZSwgc3BhdGlhbEVudGl0eU5vZGVzWzBdLmlkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=