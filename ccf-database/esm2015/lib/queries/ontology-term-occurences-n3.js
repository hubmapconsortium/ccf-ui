import { readQuads } from 'triple-store-utils';
import { ccf, entity, rui } from '../util/prefixes';
function getSpatialEntityMapping(subjects, store) {
    const spatial2entity = new Map();
    for (const subject of subjects) {
        for (const quad of readQuads(store, subject, entity.spatialEntity, null, null)) {
            if (!spatial2entity.has(quad.object.id)) {
                spatial2entity.set(quad.object.id, new Set([subject]));
            }
            else {
                spatial2entity.get(quad.object.id).add(subject);
            }
        }
    }
    return spatial2entity;
}
function getAnatomicalStructureMapping(ids, store) {
    const spatial2entity = getSpatialEntityMapping(ids, store);
    const term2entity = new Map();
    for (const subject of spatial2entity.keys()) {
        const entities = spatial2entity.get(subject);
        for (const quad of readQuads(store, subject, ccf.spatialEntity.ccf_annotations, null, null)) {
            if (!term2entity.has(quad.object.id)) {
                term2entity.set(quad.object.id, new Set(entities));
            }
            else {
                const termEntities = term2entity.get(quad.object.id);
                entities.forEach((value) => termEntities.add(value));
            }
        }
    }
    return term2entity;
}
/**
 * Get number of occurrences of ontology terms for a set of ids.
 *
 * @param ids Ids of objects to calculate aggregate over.
 * @param store The triple store.
 * @returns Ontology term counts.
 */
export function getOntologyTermOccurences(ids, store) {
    const counts = {};
    const term2entities = getAnatomicalStructureMapping(ids, store);
    term2entities.forEach((value, key) => {
        counts[key] = value.size;
    });
    return counts;
}
/**
 * Get number of occurrences of cell type terms for a set of ids.
 *
 * @param ids Ids of objects to calculate aggregate over.
 * @param store The triple store.
 * @returns Ontology term counts.
 */
export function getCellTypeTermOccurences(ids, store) {
    var _a, _b;
    const asTerm2entities = getAnatomicalStructureMapping(ids, store);
    const ctTerm2entities = new Map();
    for (const asTerm of asTerm2entities.keys()) {
        const entities = asTerm2entities.get(asTerm);
        for (const quad of readQuads(store, null, ccf.asctb.located_in, asTerm, null)) {
            const cellType = quad.subject.id;
            if (!ctTerm2entities.has(cellType)) {
                ctTerm2entities.set(cellType, new Set(entities));
            }
            else {
                const termEntities = ctTerm2entities.get(cellType);
                entities.forEach((value) => termEntities.add(value));
            }
        }
    }
    const counts = {};
    ctTerm2entities.forEach((value, key) => {
        counts[key] = value.size;
    });
    counts[rui.cell.id] = (_b = (_a = asTerm2entities.get(rui.body.id)) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;
    return counts;
}
//# sourceMappingURL=data:application/json;base64,