/* eslint-disable @typescript-eslint/naming-convention */
import { Matrix4, toRadians } from '@math.gl/core';
import { getAnatomicalStructures, getExtractionSet, getExtractionSets, getReferenceOrgans, getSpatialEntity, } from './queries/spatial-result-n3';
import { ccf } from './util/prefixes';
export class CCFSpatialScene {
    constructor(db) {
        this.db = db;
    }
    getSpatialEntity(iri) {
        return getSpatialEntity(this.db.store, iri);
    }
    getExtractionSets(iri) {
        return getExtractionSets(this.db.store, iri);
    }
    getExtractionSet(iri) {
        return getExtractionSet(this.db.store, iri);
    }
    getAnatomicalStructures(iri) {
        return getAnatomicalStructures(this.db.store, iri);
    }
    getReferenceOrgans() {
        return getReferenceOrgans(this.db.store);
    }
    getReferenceBody(filter) {
        let bodyId;
        switch (filter === null || filter === void 0 ? void 0 : filter.sex) {
            case 'Male':
                bodyId = ccf.spatial.Male.id;
                break;
            case 'Female':
                bodyId = ccf.spatial.Female.id;
                break;
            case 'Both':
            default:
                bodyId = ccf.spatial.BothSexes.id;
                break;
        }
        return this.getSpatialEntity(bodyId);
    }
    getReferenceOrganSets(filter) {
        let organSet = this.getReferenceOrgans();
        switch (filter === null || filter === void 0 ? void 0 : filter.sex) {
            case 'Male':
                organSet = organSet.filter(s => s.sex === 'Male');
                break;
            case 'Female':
                organSet = organSet.filter(s => s.sex === 'Female');
                break;
            case 'Both':
            default:
                break;
        }
        if (filter === null || filter === void 0 ? void 0 : filter.debug) {
            organSet = organSet.map(o => [[o], this.getAnatomicalStructures(o['@id'])])
                .reduce((acc, [organ, structures]) => acc.concat(structures.length > 0 ? structures : organ), []);
        }
        return organSet;
    }
    getReferenceSceneNodes(filter) {
        const body = this.getReferenceBody(filter);
        const skinNodes = [];
        let nodes = [
            ...this.getReferenceOrganSets(filter).map((organ) => {
                const isSkin = organ.representation_of === 'http://purl.obolibrary.org/obo/UBERON_0002097';
                const sceneNode = this.getSceneNode(organ, body, {
                    color: [255, 255, 255, 255], opacity: isSkin ? 0.5 : 0.2, unpickable: true, _lighting: 'pbr', zoomBasedOpacity: !isSkin
                });
                if (isSkin && sceneNode) {
                    skinNodes.push(sceneNode);
                    return undefined;
                }
                else {
                    return sceneNode;
                }
            })
        ];
        if (skinNodes.length > 0) {
            nodes = [...skinNodes, ...nodes];
        }
        if (filter === null || filter === void 0 ? void 0 : filter.debug) {
            // Debug bounding boxes
            nodes = nodes.concat([
                this.getSceneNode(this.getSpatialEntity(ccf.base('VHRightKidney').id), body, { color: [0, 0, 255, 0.5 * 255], geometry: 'wireframe' }),
                this.getSceneNode(this.getSpatialEntity(ccf.base('VHLeftKidney').id), body, { color: [255, 0, 0, 0.5 * 255], geometry: 'wireframe' }),
                this.getSceneNode(this.getSpatialEntity(ccf.base('VHSpleenCC1').id), body, { color: [0, 255, 0, 0.5 * 255], geometry: 'wireframe' }),
                this.getSceneNode(this.getSpatialEntity(ccf.base('VHSpleenCC2').id), body, { color: [0, 255, 0, 0.5 * 255], geometry: 'wireframe' }),
                this.getSceneNode(this.getSpatialEntity(ccf.base('VHSpleenCC3').id), body, { color: [0, 255, 0, 0.5 * 255], geometry: 'wireframe' })
            ]);
        }
        return nodes.filter(s => s !== undefined);
    }
    getReferenceOrganScene(organIri, filter) {
        var _a, _b;
        const hasSexFilter = (filter === null || filter === void 0 ? void 0 : filter.sex) !== undefined && ((_a = filter === null || filter === void 0 ? void 0 : filter.sex) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'both';
        const organs = this.getReferenceOrgans().filter((o) => o.representation_of === organIri && (!hasSexFilter || o.sex === (filter === null || filter === void 0 ? void 0 : filter.sex)));
        if (organs.length > 0) {
            const organ = organs[0];
            const isSkin = organ.representation_of === 'http://purl.obolibrary.org/obo/UBERON_0002097';
            const organNode = this.getSceneNode(organ, organ, {
                color: [255, 255, 255, 255], opacity: isSkin ? 0.5 : 0.2, unpickable: true, _lighting: 'pbr'
            });
            const scene = ((_b = this.db.getSpatialEntities(filter)) !== null && _b !== void 0 ? _b : []).map((entity) => this.getSceneNode(entity, organ, { color: [255, 255, 255, 0.9 * 255] }));
            return [organNode].concat(scene).filter(n => n !== undefined);
        }
        else {
            return [];
        }
    }
    getEntitySceneNodes(filter) {
        const body = this.getReferenceBody(filter);
        return this.db.getSpatialEntities(filter).map((entity) => this.getSceneNode(entity, body, { color: [255, 255, 255, 0.9 * 255] })).filter(s => s !== undefined);
    }
    getSceneNode(source, target, nodeAttrs = {}) {
        var _a, _b, _c, _d;
        const has3dObject = (_b = (_a = source === null || source === void 0 ? void 0 : source.object) === null || _a === void 0 ? void 0 : _a.file_format) === null || _b === void 0 ? void 0 : _b.startsWith('model/gltf');
        const sourceID = has3dObject && source.object ? source.object['@id'] : source['@id'];
        let transform = this.db.graph.getTransformationMatrix(sourceID, target['@id']);
        if (transform) {
            if (has3dObject) {
                transform = new Matrix4(Matrix4.IDENTITY).rotateX(toRadians(90)).multiplyLeft(transform);
            }
            else {
                // Scale visible bounding boxes to the desired dimensions
                let factor;
                switch (source.dimension_units) {
                    case 'centimeter':
                        factor = 1 / 100;
                        break;
                    case 'millimeter':
                        factor = 1 / 1000;
                        break;
                    case 'meter':
                    default:
                        factor = 1;
                        break;
                }
                const scale = [source.x_dimension, source.y_dimension, source.z_dimension].map(dim => dim * factor / 2);
                transform.scale(scale);
            }
            return Object.assign({ '@id': source['@id'], '@type': 'SpatialSceneNode', entityId: source.entityId, ccf_annotations: source.ccf_annotations, representation_of: source.representation_of, reference_organ: source.reference_organ, scenegraph: has3dObject ? (_c = source.object) === null || _c === void 0 ? void 0 : _c.file : undefined, scenegraphNode: has3dObject ? (_d = source.object) === null || _d === void 0 ? void 0 : _d.file_subpath : undefined, transformMatrix: transform, tooltip: source.label }, nodeAttrs);
        }
        else {
            return undefined;
        }
    }
    getScene(filter) {
        return [
            ...this.getReferenceSceneNodes(filter),
            ...this.getEntitySceneNodes(filter)
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2NmLXNwYXRpYWwtc2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jY2YtZGF0YWJhc2Uvc3JjL2xpYi9jY2Ytc3BhdGlhbC1zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJbkQsT0FBTyxFQUNMLHVCQUF1QixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixHQUNuRyxNQUFNLDZCQUE2QixDQUFDO0FBRXJDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQTRCdEMsTUFBTSxPQUFPLGVBQWU7SUFFMUIsWUFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7SUFBRyxDQUFDO0lBRXZDLGdCQUFnQixDQUFDLEdBQVc7UUFDMUIsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQ0QsaUJBQWlCLENBQUMsR0FBVztRQUMzQixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxnQkFBZ0IsQ0FBQyxHQUFXO1FBQzFCLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUNELHVCQUF1QixDQUFDLEdBQVc7UUFDakMsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ0Qsa0JBQWtCO1FBQ2hCLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENB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TyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQ2xCLFNBQVMsRUFDWjtTQUNIO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFRCxRQUFRLENBQUMsTUFBZTtRQUN0QixPQUFPO1lBQ0wsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDO1lBQ3RDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQztTQUNwQyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5pbXBvcnQgeyBNYXRyaXg0LCB0b1JhZGlhbnMgfSBmcm9tICdAbWF0aC5nbC9jb3JlJztcblxuaW1wb3J0IHsgQ0NGRGF0YWJhc2UgfSBmcm9tICcuL2NjZi1kYXRhYmFzZSc7XG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtcbiAgZ2V0QW5hdG9taWNhbFN0cnVjdHVyZXMsIGdldEV4dHJhY3Rpb25TZXQsIGdldEV4dHJhY3Rpb25TZXRzLCBnZXRSZWZlcmVuY2VPcmdhbnMsIGdldFNwYXRpYWxFbnRpdHksXG59IGZyb20gJy4vcXVlcmllcy9zcGF0aWFsLXJlc3VsdC1uMyc7XG5pbXBvcnQgeyBFeHRyYWN0aW9uU2V0LCBTcGF0aWFsRW50aXR5IH0gZnJvbSAnLi9zcGF0aWFsLXR5cGVzJztcbmltcG9ydCB7IGNjZiB9IGZyb20gJy4vdXRpbC9wcmVmaXhlcyc7XG5cblxuZXhwb3J0IHR5cGUgU3BhdGlhbFNjZW5lR2VvbWV0cnkgPSAnc3BoZXJlJyB8ICdjdWJlJyB8ICd3aXJlZnJhbWUnIHwgJ3RleHQnIHwgJ2NvbmUnIHwgJ2N5bGluZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBTcGF0aWFsU2NlbmVOb2RlIHtcbiAgJ0BpZCc6IHN0cmluZztcbiAgJ0B0eXBlJzogc3RyaW5nO1xuICBlbnRpdHlJZD86IHN0cmluZztcbiAgY2NmX2Fubm90YXRpb25zPzogc3RyaW5nW107XG4gIHJlcHJlc2VudGF0aW9uX29mPzogc3RyaW5nO1xuICByZWZlcmVuY2Vfb3JnYW4/OiBzdHJpbmc7XG4gIHVucGlja2FibGU/OiBib29sZWFuO1xuICBnZW9tZXRyeT86IFNwYXRpYWxTY2VuZUdlb21ldHJ5O1xuICB0ZXh0Pzogc3RyaW5nO1xuICBfbGlnaHRpbmc/OiBzdHJpbmc7XG4gIHNjZW5lZ3JhcGg/OiBzdHJpbmc7XG4gIHNjZW5lZ3JhcGhOb2RlPzogc3RyaW5nO1xuICB6b29tQmFzZWRPcGFjaXR5PzogYm9vbGVhbjtcbiAgem9vbVRvT25Mb2FkPzogYm9vbGVhbjtcbiAgY29sb3I/OiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgb3BhY2l0eT86IG51bWJlcjtcbiAgdHJhbnNmb3JtTWF0cml4OiBNYXRyaXg0O1xuICBuYW1lPzogc3RyaW5nO1xuICB0b29sdGlwPzogc3RyaW5nO1xuICBwcmlvcml0eT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIENDRlNwYXRpYWxTY2VuZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkYjogQ0NGRGF0YWJhc2UpIHt9XG5cbiAgZ2V0U3BhdGlhbEVudGl0eShpcmk6IHN0cmluZyk6IFNwYXRpYWxFbnRpdHkge1xuICAgIHJldHVybiBnZXRTcGF0aWFsRW50aXR5KHRoaXMuZGIuc3RvcmUsIGlyaSk7XG4gIH1cbiAgZ2V0RXh0cmFjdGlvblNldHMoaXJpOiBzdHJpbmcpOiBFeHRyYWN0aW9uU2V0W10ge1xuICAgIHJldHVybiBnZXRFeHRyYWN0aW9uU2V0cyh0aGlzLmRiLnN0b3JlLCBpcmkpO1xuICB9XG4gIGdldEV4dHJhY3Rpb25TZXQoaXJpOiBzdHJpbmcpOiBFeHRyYWN0aW9uU2V0IHtcbiAgICByZXR1cm4gZ2V0RXh0cmFjdGlvblNldCh0aGlzLmRiLnN0b3JlLCBpcmkpO1xuICB9XG4gIGdldEFuYXRvbWljYWxTdHJ1Y3R1cmVzKGlyaTogc3RyaW5nKTogU3BhdGlhbEVudGl0eVtdIHtcbiAgICByZXR1cm4gZ2V0QW5hdG9taWNhbFN0cnVjdHVyZXModGhpcy5kYi5zdG9yZSwgaXJpKTtcbiAgfVxuICBnZXRSZWZlcmVuY2VPcmdhbnMoKTogU3BhdGlhbEVudGl0eVtdIHtcbiAgICByZXR1cm4gZ2V0UmVmZXJlbmNlT3JnYW5zKHRoaXMuZGIuc3RvcmUpO1xuICB9XG5cbiAgZ2V0UmVmZXJlbmNlQm9keShmaWx0ZXI/OiBGaWx0ZXIpOiBTcGF0aWFsRW50aXR5IHtcbiAgICBsZXQgYm9keUlkOiBzdHJpbmc7XG4gICAgc3dpdGNoIChmaWx0ZXI/LnNleCkge1xuICAgICAgY2FzZSAnTWFsZSc6XG4gICAgICAgIGJvZHlJZCA9IGNjZi5zcGF0aWFsLk1hbGUuaWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnRmVtYWxlJzpcbiAgICAgICAgYm9keUlkID0gY2NmLnNwYXRpYWwuRmVtYWxlLmlkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0JvdGgnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYm9keUlkID0gY2NmLnNwYXRpYWwuQm90aFNleGVzLmlkO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3BhdGlhbEVudGl0eShib2R5SWQpO1xuICB9XG5cbiAgZ2V0UmVmZXJlbmNlT3JnYW5TZXRzKGZpbHRlcj86IEZpbHRlcik6IFNwYXRpYWxFbnRpdHlbXSB7XG4gICAgbGV0IG9yZ2FuU2V0ID0gdGhpcy5nZXRSZWZlcmVuY2VPcmdhbnMoKTtcbiAgICBzd2l0Y2ggKGZpbHRlcj8uc2V4KSB7XG4gICAgICBjYXNlICdNYWxlJzpcbiAgICAgICAgb3JnYW5TZXQgPSBvcmdhblNldC5maWx0ZXIocyA9PiBzLnNleCA9PT0gJ01hbGUnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdGZW1hbGUnOlxuICAgICAgICBvcmdhblNldCA9IG9yZ2FuU2V0LmZpbHRlcihzID0+IHMuc2V4ID09PSAnRmVtYWxlJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQm90aCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGZpbHRlcj8uZGVidWcpIHtcbiAgICAgIG9yZ2FuU2V0ID0gb3JnYW5TZXQubWFwKG8gPT4gWyBbb10sIHRoaXMuZ2V0QW5hdG9taWNhbFN0cnVjdHVyZXMob1snQGlkJ10pXSlcbiAgICAgICAgLnJlZHVjZTxTcGF0aWFsRW50aXR5W10+KChhY2MsIFtvcmdhbiwgc3RydWN0dXJlc10pID0+IGFjYy5jb25jYXQoc3RydWN0dXJlcy5sZW5ndGggPiAwID8gc3RydWN0dXJlcyA6IG9yZ2FuKSwgW10pO1xuICAgIH1cbiAgICByZXR1cm4gb3JnYW5TZXQ7XG4gIH1cblxuICBnZXRSZWZlcmVuY2VTY2VuZU5vZGVzKGZpbHRlcj86IEZpbHRlcik6IFNwYXRpYWxTY2VuZU5vZGVbXSB7XG4gICAgY29uc3QgYm9keSA9IHRoaXMuZ2V0UmVmZXJlbmNlQm9keShmaWx0ZXIpO1xuICAgIGNvbnN0IHNraW5Ob2RlczogU3BhdGlhbFNjZW5lTm9kZVtdID0gW107XG4gICAgbGV0IG5vZGVzOiAoU3BhdGlhbFNjZW5lTm9kZSB8IHVuZGVmaW5lZClbXSA9IFtcbiAgICAgIC4uLnRoaXMuZ2V0UmVmZXJlbmNlT3JnYW5TZXRzKGZpbHRlcikubWFwKChvcmdhbikgPT4ge1xuICAgICAgICBjb25zdCBpc1NraW4gPSBvcmdhbi5yZXByZXNlbnRhdGlvbl9vZiA9PT0gJ2h0dHA6Ly9wdXJsLm9ib2xpYnJhcnkub3JnL29iby9VQkVST05fMDAwMjA5Nyc7XG4gICAgICAgIGNvbnN0IHNjZW5lTm9kZSA9IHRoaXMuZ2V0U2NlbmVOb2RlKG9yZ2FuLCBib2R5LCB7XG4gICAgICAgICAgY29sb3I6IFsyNTUsIDI1NSwgMjU1LCAyNTVdLCBvcGFjaXR5OiBpc1NraW4gPyAwLjUgOiAwLjIsIHVucGlja2FibGU6IHRydWUsIF9saWdodGluZzogJ3BicicsIHpvb21CYXNlZE9wYWNpdHk6ICFpc1NraW5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc1NraW4gJiYgc2NlbmVOb2RlKSB7XG4gICAgICAgICAgc2tpbk5vZGVzLnB1c2goc2NlbmVOb2RlKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzY2VuZU5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgXTtcbiAgICBpZiAoc2tpbk5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIG5vZGVzID0gWy4uLnNraW5Ob2RlcywgLi4ubm9kZXNdO1xuICAgIH1cblxuICAgIGlmIChmaWx0ZXI/LmRlYnVnKSB7XG4gICAgICAvLyBEZWJ1ZyBib3VuZGluZyBib3hlc1xuICAgICAgbm9kZXMgPSBub2Rlcy5jb25jYXQoW1xuICAgICAgICB0aGlzLmdldFNjZW5lTm9kZSh0aGlzLmdldFNwYXRpYWxFbnRpdHkoY2NmLmJhc2UoJ1ZIUmlnaHRLaWRuZXknKS5pZCksIGJvZHksIHsgY29sb3I6IFswLCAwLCAyNTUsIDAuNSoyNTVdLCBnZW9tZXRyeTogJ3dpcmVmcmFtZScgfSksXG4gICAgICAgIHRoaXMuZ2V0U2NlbmVOb2RlKHRoaXMuZ2V0U3BhdGlhbEVudGl0eShjY2YuYmFzZSgnVkhMZWZ0S2lkbmV5JykuaWQpLCBib2R5LCB7IGNvbG9yOiBbMjU1LCAwLCAwLCAwLjUqMjU1XSwgZ2VvbWV0cnk6ICd3aXJlZnJhbWUnIH0pLFxuICAgICAgICB0aGlzLmdldFNjZW5lTm9kZSh0aGlzLmdldFNwYXRpYWxFbnRpdHkoY2NmLmJhc2UoJ1ZIU3BsZWVuQ0MxJykuaWQpLCBib2R5LCB7IGNvbG9yOiBbMCwgMjU1LCAwLCAwLjUqMjU1XSwgZ2VvbWV0cnk6ICd3aXJlZnJhbWUnIH0pLFxuICAgICAgICB0aGlzLmdldFNjZW5lTm9kZSh0aGlzLmdldFNwYXRpYWxFbnRpdHkoY2NmLmJhc2UoJ1ZIU3BsZWVuQ0MyJykuaWQpLCBib2R5LCB7IGNvbG9yOiBbMCwgMjU1LCAwLCAwLjUqMjU1XSwgZ2VvbWV0cnk6ICd3aXJlZnJhbWUnIH0pLFxuICAgICAgICB0aGlzLmdldFNjZW5lTm9kZSh0aGlzLmdldFNwYXRpYWxFbnRpdHkoY2NmLmJhc2UoJ1ZIU3BsZWVuQ0MzJykuaWQpLCBib2R5LCB7IGNvbG9yOiBbMCwgMjU1LCAwLCAwLjUqMjU1XSwgZ2VvbWV0cnk6ICd3aXJlZnJhbWUnIH0pXG4gICAgICBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZXMuZmlsdGVyKHMgPT4gcyAhPT0gdW5kZWZpbmVkKSBhcyBTcGF0aWFsU2NlbmVOb2RlW107XG4gIH1cblxuICBnZXRSZWZlcmVuY2VPcmdhblNjZW5lKG9yZ2FuSXJpOiBzdHJpbmcsIGZpbHRlcj86IEZpbHRlcik6IFNwYXRpYWxTY2VuZU5vZGVbXSB7XG4gICAgY29uc3QgaGFzU2V4RmlsdGVyID0gZmlsdGVyPy5zZXggIT09IHVuZGVmaW5lZCAmJiBmaWx0ZXI/LnNleD8udG9Mb3dlckNhc2UoKSAhPT0gJ2JvdGgnO1xuICAgIGNvbnN0IG9yZ2FucyA9IHRoaXMuZ2V0UmVmZXJlbmNlT3JnYW5zKCkuZmlsdGVyKChvKSA9PiBvLnJlcHJlc2VudGF0aW9uX29mID09PSBvcmdhbklyaSAmJiAoIWhhc1NleEZpbHRlciB8fCBvLnNleCA9PT0gZmlsdGVyPy5zZXgpKTtcbiAgICBpZiAob3JnYW5zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG9yZ2FuID0gb3JnYW5zWzBdO1xuICAgICAgY29uc3QgaXNTa2luID0gb3JnYW4ucmVwcmVzZW50YXRpb25fb2YgPT09ICdodHRwOi8vcHVybC5vYm9saWJyYXJ5Lm9yZy9vYm8vVUJFUk9OXzAwMDIwOTcnO1xuICAgICAgY29uc3Qgb3JnYW5Ob2RlID0gdGhpcy5nZXRTY2VuZU5vZGUob3JnYW4sIG9yZ2FuLCB7XG4gICAgICAgIGNvbG9yOiBbMjU1LCAyNTUsIDI1NSwgMjU1XSwgb3BhY2l0eTogaXNTa2luID8gMC41IDogMC4yLCB1bnBpY2thYmxlOiB0cnVlLCBfbGlnaHRpbmc6ICdwYnInXG4gICAgICB9KSBhcyBTcGF0aWFsU2NlbmVOb2RlO1xuXG4gICAgICBjb25zdCBzY2VuZSA9ICh0aGlzLmRiLmdldFNwYXRpYWxFbnRpdGllcyhmaWx0ZXIpID8/IFtdKS5tYXAoKGVudGl0eSkgPT5cbiAgICAgICAgdGhpcy5nZXRTY2VuZU5vZGUoZW50aXR5LCBvcmdhbiwgeyBjb2xvcjogWzI1NSwgMjU1LCAyNTUsIDAuOSoyNTVdIH0pXG4gICAgICApIGFzIFNwYXRpYWxTY2VuZU5vZGVbXTtcbiAgICAgIHJldHVybiBbb3JnYW5Ob2RlXS5jb25jYXQoc2NlbmUpLmZpbHRlcihuID0+IG4gIT09IHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBnZXRFbnRpdHlTY2VuZU5vZGVzKGZpbHRlcj86IEZpbHRlcik6IFNwYXRpYWxTY2VuZU5vZGVbXSB7XG4gICAgY29uc3QgYm9keSA9IHRoaXMuZ2V0UmVmZXJlbmNlQm9keShmaWx0ZXIpO1xuICAgIHJldHVybiB0aGlzLmRiLmdldFNwYXRpYWxFbnRpdGllcyhmaWx0ZXIpLm1hcCgoZW50aXR5KSA9PlxuICAgICAgdGhpcy5nZXRTY2VuZU5vZGUoZW50aXR5LCBib2R5LCB7IGNvbG9yOiBbMjU1LCAyNTUsIDI1NSwgMC45KjI1NV0gfSlcbiAgICApLmZpbHRlcihzID0+IHMgIT09IHVuZGVmaW5lZCkgYXMgU3BhdGlhbFNjZW5lTm9kZVtdO1xuICB9XG5cbiAgZ2V0U2NlbmVOb2RlKHNvdXJjZTogU3BhdGlhbEVudGl0eSwgdGFyZ2V0OiBTcGF0aWFsRW50aXR5LCBub2RlQXR0cnM6IFBhcnRpYWw8U3BhdGlhbFNjZW5lTm9kZT4gPSB7fSk6IFNwYXRpYWxTY2VuZU5vZGUgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGhhczNkT2JqZWN0ID0gc291cmNlPy5vYmplY3Q/LmZpbGVfZm9ybWF0Py5zdGFydHNXaXRoKCdtb2RlbC9nbHRmJyk7XG4gICAgY29uc3Qgc291cmNlSUQgPSBoYXMzZE9iamVjdCAmJiBzb3VyY2Uub2JqZWN0ID8gc291cmNlLm9iamVjdFsnQGlkJ10gOiBzb3VyY2VbJ0BpZCddO1xuICAgIGxldCB0cmFuc2Zvcm0gPSB0aGlzLmRiLmdyYXBoLmdldFRyYW5zZm9ybWF0aW9uTWF0cml4KHNvdXJjZUlELCB0YXJnZXRbJ0BpZCddKTtcbiAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICBpZiAoaGFzM2RPYmplY3QpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gbmV3IE1hdHJpeDQoTWF0cml4NC5JREVOVElUWSkucm90YXRlWCh0b1JhZGlhbnMoOTApKS5tdWx0aXBseUxlZnQodHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNjYWxlIHZpc2libGUgYm91bmRpbmcgYm94ZXMgdG8gdGhlIGRlc2lyZWQgZGltZW5zaW9uc1xuICAgICAgICBsZXQgZmFjdG9yOiBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoc291cmNlLmRpbWVuc2lvbl91bml0cykge1xuICAgICAgICAgIGNhc2UgJ2NlbnRpbWV0ZXInOlxuICAgICAgICAgICAgZmFjdG9yID0gMSAvIDEwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ21pbGxpbWV0ZXInOlxuICAgICAgICAgICAgZmFjdG9yID0gMSAvIDEwMDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdtZXRlcic6XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGZhY3RvciA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZSA9IFtzb3VyY2UueF9kaW1lbnNpb24sIHNvdXJjZS55X2RpbWVuc2lvbiwgc291cmNlLnpfZGltZW5zaW9uXS5tYXAoZGltID0+IGRpbSAqIGZhY3RvciAvIDIpO1xuICAgICAgICB0cmFuc2Zvcm0uc2NhbGUoc2NhbGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ0BpZCc6IHNvdXJjZVsnQGlkJ10sICdAdHlwZSc6ICdTcGF0aWFsU2NlbmVOb2RlJyxcbiAgICAgICAgZW50aXR5SWQ6IHNvdXJjZS5lbnRpdHlJZCxcbiAgICAgICAgY2NmX2Fubm90YXRpb25zOiBzb3VyY2UuY2NmX2Fubm90YXRpb25zLFxuICAgICAgICByZXByZXNlbnRhdGlvbl9vZjogc291cmNlLnJlcHJlc2VudGF0aW9uX29mLFxuICAgICAgICByZWZlcmVuY2Vfb3JnYW46IHNvdXJjZS5yZWZlcmVuY2Vfb3JnYW4sXG4gICAgICAgIHNjZW5lZ3JhcGg6IGhhczNkT2JqZWN0ID8gc291cmNlLm9iamVjdD8uZmlsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2NlbmVncmFwaE5vZGU6IGhhczNkT2JqZWN0ID8gc291cmNlLm9iamVjdD8uZmlsZV9zdWJwYXRoIDogdW5kZWZpbmVkLFxuICAgICAgICB0cmFuc2Zvcm1NYXRyaXg6IHRyYW5zZm9ybSxcbiAgICAgICAgdG9vbHRpcDogc291cmNlLmxhYmVsLFxuICAgICAgICAuLi5ub2RlQXR0cnNcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0U2NlbmUoZmlsdGVyPzogRmlsdGVyKTogU3BhdGlhbFNjZW5lTm9kZVtdIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4udGhpcy5nZXRSZWZlcmVuY2VTY2VuZU5vZGVzKGZpbHRlciksXG4gICAgICAuLi50aGlzLmdldEVudGl0eVNjZW5lTm9kZXMoZmlsdGVyKVxuICAgIF07XG4gIH1cbn1cbiJdfQ==