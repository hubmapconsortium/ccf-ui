import { fromRdf } from 'rdf-literal';
import { readQuads } from 'triple-store-utils';
/**
 * Iterates over the key/value pairs for an IRI, using the specified mapping with quads from the store.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @param mapping Property mappings.
 * @returns an iterator over the key/value pairs
 */
export function* getEntries(store, iri, mapping) {
    for (const [predicate, key] of Object.entries(mapping)) {
        for (const quad of readQuads(store, iri, predicate, null, null)) {
            const value = quad.object.termType === 'Literal' ? fromRdf(quad.object) : quad.object.id;
            yield [key, value];
        }
    }
}
/**
 * Creates an object of the specified type using quads from the store.
 *
 * @param store The triple store.
 * @param iri The data identifier.
 * @param type Type name.
 * @param mapping Property mappings.
 * @returns A new data object.
 */
export function getMappedResult(store, iri, type, mapping) {
    const result = { '@id': iri, '@type': type };
    for (const [predicate, key] of Object.entries(mapping)) {
        for (const quad of readQuads(store, result['@id'], predicate, null, null)) {
            const value = quad.object.termType === 'Literal' ? fromRdf(quad.object) : quad.object.id;
            result[key] = value;
        }
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibjMtZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2NmLWRhdGFiYXNlL3NyYy9saWIvdXRpbC9uMy1mdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQVMsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHdEQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQVksRUFBRSxHQUFXLEVBQUUsT0FBa0M7SUFDdkYsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdEQsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQy9ELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDekYsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNwQjtLQUNGO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBYyxLQUFZLEVBQUUsR0FBVyxFQUFFLElBQVksRUFBRSxPQUFrQztJQUN0SCxNQUFNLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzdDLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3RELEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUN6RSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3pGLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDckI7S0FDRjtJQUNELE9BQU8sTUFBc0IsQ0FBQztBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbVJkZiB9IGZyb20gJ3JkZi1saXRlcmFsJztcbmltcG9ydCB7IFN0b3JlLCByZWFkUXVhZHMgfSBmcm9tICd0cmlwbGUtc3RvcmUtdXRpbHMnO1xuXG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciB0aGUga2V5L3ZhbHVlIHBhaXJzIGZvciBhbiBJUkksIHVzaW5nIHRoZSBzcGVjaWZpZWQgbWFwcGluZyB3aXRoIHF1YWRzIGZyb20gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBzdG9yZSBUaGUgdHJpcGxlIHN0b3JlLlxuICogQHBhcmFtIGlyaSBUaGUgZGF0YSBpZGVudGlmaWVyLlxuICogQHBhcmFtIG1hcHBpbmcgUHJvcGVydHkgbWFwcGluZ3MuXG4gKiBAcmV0dXJucyBhbiBpdGVyYXRvciBvdmVyIHRoZSBrZXkvdmFsdWUgcGFpcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uKiBnZXRFbnRyaWVzKHN0b3JlOiBTdG9yZSwgaXJpOiBzdHJpbmcsIG1hcHBpbmc6IHsgW2lyaTogc3RyaW5nXTogc3RyaW5nIH0pOiBHZW5lcmF0b3I8WyBzdHJpbmcsIHN0cmluZ3xudW1iZXIgXT4ge1xuICBmb3IgKGNvbnN0IFtwcmVkaWNhdGUsIGtleV0gb2YgT2JqZWN0LmVudHJpZXMobWFwcGluZykpIHtcbiAgICBmb3IgKGNvbnN0IHF1YWQgb2YgcmVhZFF1YWRzKHN0b3JlLCBpcmksIHByZWRpY2F0ZSwgbnVsbCwgbnVsbCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcXVhZC5vYmplY3QudGVybVR5cGUgPT09ICdMaXRlcmFsJyA/IGZyb21SZGYocXVhZC5vYmplY3QpIDogcXVhZC5vYmplY3QuaWQ7XG4gICAgICB5aWVsZCBba2V5LCB2YWx1ZV07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3Qgb2YgdGhlIHNwZWNpZmllZCB0eXBlIHVzaW5nIHF1YWRzIGZyb20gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBzdG9yZSBUaGUgdHJpcGxlIHN0b3JlLlxuICogQHBhcmFtIGlyaSBUaGUgZGF0YSBpZGVudGlmaWVyLlxuICogQHBhcmFtIHR5cGUgVHlwZSBuYW1lLlxuICogQHBhcmFtIG1hcHBpbmcgUHJvcGVydHkgbWFwcGluZ3MuXG4gKiBAcmV0dXJucyBBIG5ldyBkYXRhIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcHBlZFJlc3VsdDxUID0gdW5rbm93bj4oc3RvcmU6IFN0b3JlLCBpcmk6IHN0cmluZywgdHlwZTogc3RyaW5nLCBtYXBwaW5nOiB7IFtpcmk6IHN0cmluZ106IHN0cmluZyB9KTogVCB7XG4gIGNvbnN0IHJlc3VsdCA9IHsgJ0BpZCc6IGlyaSwgJ0B0eXBlJzogdHlwZSB9O1xuICBmb3IgKGNvbnN0IFtwcmVkaWNhdGUsIGtleV0gb2YgT2JqZWN0LmVudHJpZXMobWFwcGluZykpIHtcbiAgICBmb3IgKGNvbnN0IHF1YWQgb2YgcmVhZFF1YWRzKHN0b3JlLCByZXN1bHRbJ0BpZCddLCBwcmVkaWNhdGUsIG51bGwsIG51bGwpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHF1YWQub2JqZWN0LnRlcm1UeXBlID09PSAnTGl0ZXJhbCcgPyBmcm9tUmRmKHF1YWQub2JqZWN0KSA6IHF1YWQub2JqZWN0LmlkO1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdCBhcyB1bmtub3duIGFzIFQ7XG59XG4iXX0=