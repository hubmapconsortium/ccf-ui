/* eslint-disable @typescript-eslint/no-unsafe-call */
import { CompositeLayer, COORDINATE_SYSTEM } from '@deck.gl/core';
import { TextLayer } from '@deck.gl/layers';
import { ScenegraphLayer, SimpleMeshLayer } from '@deck.gl/mesh-layers';
import { ConeGeometry, CubeGeometry, CylinderGeometry, SphereGeometry } from '@luma.gl/core';
import { Matrix4 } from '@math.gl/core';
import { loadGLTF, loadGLTF2, registerGLTFLoaders } from './util/load-gltf';
import { doCollisions } from './util/spatial-scene-collider';
function meshLayer(id, data, options) {
    if (!data || data.length === 0) {
        return undefined;
    }
    else {
        let mesh;
        switch (options.geometry) {
            case 'sphere':
                mesh = new SphereGeometry();
                break;
            case 'cone':
                mesh = new ConeGeometry();
                break;
            case 'cylinder':
                mesh = new CylinderGeometry();
                break;
            case 'cube':
            default:
                mesh = new CubeGeometry();
                break;
        }
        return new SimpleMeshLayer(Object.assign({
            id,
            pickable: true,
            autoHighlight: false,
            highlightColor: [30, 136, 229, 255],
            coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
            data,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            mesh: mesh,
            wireframe: false,
            getTransformMatrix: (d) => d.transformMatrix,
            getColor: (d) => d.color || [255, 255, 255, 0.9 * 255]
        }, options));
    }
}
function textLayer(id, data, options) {
    if (!data || data.length === 0) {
        return undefined;
    }
    else {
        return new TextLayer(Object.assign({
            id,
            pickable: true,
            data: data.map(d => (Object.assign(Object.assign({}, d), { position: new Matrix4(d.transformMatrix).getTranslation() }))),
            getText: (d) => d.text,
            getPosition: (d) => d.position,
            getColor: (d) => d.color
        }, options));
    }
}
export class BodyUILayer extends CompositeLayer {
    initializeState() {
        const { data } = this.props;
        this.setState({ data: data !== null && data !== void 0 ? data : [], zoomOpacity: 0.8, doCollisions: false });
        registerGLTFLoaders();
    }
    renderLayers() {
        var _a, _b;
        const state = this.state;
        const geometries = {
            'sphere': [], 'cone': [], 'cylinder': [], 'cube': [], 'text': [], 'wireframe': [], 'scenegraph': []
        };
        for (const node of state.data) {
            const geometry = (_a = node.geometry) !== null && _a !== void 0 ? _a : 'cube';
            if (node.scenegraph) {
                geometries.scenegraph.push(node);
            }
            else if (geometries[geometry] !== undefined) {
                geometries[geometry].push(node);
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const url2gltf = {};
        for (const m of geometries.scenegraph) {
            if (m.scenegraph && m.scenegraphNode && !Object.prototype.hasOwnProperty.call(url2gltf, m.scenegraph)) {
                url2gltf[m.scenegraph] = loadGLTF({ scenegraph: m.scenegraph }, BodyUILayer.gltfCache);
            }
        }
        const layers = [];
        for (const [geometry, nodes] of Object.entries(geometries)) {
            if (geometry === 'scenegraph') {
                for (const model of nodes) {
                    layers.push(new ScenegraphLayer({
                        id: 'models-' + model['@id'],
                        opacity: model.zoomBasedOpacity ? state.zoomOpacity : (model.opacity !== undefined ? model.opacity : 1.0),
                        pickable: !model.unpickable,
                        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,
                        data: [model],
                        scenegraph: model.scenegraphNode ?
                            loadGLTF2(model.scenegraphNode, url2gltf[model.scenegraph]) :
                            model.scenegraph,
                        // eslint-disable-next-line @typescript-eslint/naming-convention
                        _lighting: model._lighting,
                        getTransformMatrix: model.transformMatrix,
                        getColor: (_b = model.color) !== null && _b !== void 0 ? _b : [0, 255, 0, 0.5 * 255],
                        parameters: { depthMask: !model.zoomBasedOpacity && (model.opacity === undefined || model.opacity === 1) }
                    }));
                }
            }
            else if (geometry === 'text') {
                layers.push(textLayer('text', nodes.filter(n => n.unpickable), { pickable: false }));
                layers.push(textLayer('textPickable', nodes.filter(n => !n.unpickable), { pickable: true }));
            }
            else if (geometry === 'wireframe') {
                layers.push(meshLayer(geometry, nodes, { wireframe: true, pickable: false, geometry }));
            }
            else {
                layers.push(meshLayer(geometry, nodes.filter(n => n.unpickable), { wireframe: false, pickable: false, geometry }));
                layers.push(meshLayer(`${geometry}Pickable`, nodes.filter(n => !n.unpickable), { wireframe: false, pickable: true, geometry }));
            }
        }
        if (state.doCollisions) {
            doCollisions(state.data);
        }
        return layers.filter(l => !!l);
    }
    getPickingInfo(e) {
        return e.info;
    }
}
BodyUILayer.layerName = 'BodyUILayer';
BodyUILayer.gltfCache = {};
//# sourceMappingURL=data:application/json;base64,