import { __awaiter, __decorate } from "tslib";
/* eslint-disable @typescript-eslint/consistent-type-assertions */
/* eslint-disable @typescript-eslint/member-ordering */
import { AmbientLight, Deck, LightingEffect, OrbitView, OrthographicView } from '@deck.gl/core';
import { Matrix4 } from '@math.gl/core';
import bind from 'bind-decorator';
import { BehaviorSubject, Subject } from 'rxjs';
import { share } from 'rxjs/operators';
import { BodyUILayer } from './body-ui-layer';
import { processSceneNodes } from './util/process-scene-nodes';
/**
 * A convenience wrapper class for the CCF Body UI
 */
export class BodyUI {
    constructor(deckProps) {
        var _a, _b, _c, _d, _e;
        this.deckProps = deckProps;
        this.bodyUILayer = new BodyUILayer({});
        this.nodeClickSubject = new Subject();
        this.nodeHoverStartSubject = new Subject();
        this.nodeHoverStopSubject = new Subject();
        this.sceneRotationSubject = new BehaviorSubject([0, 0]);
        this.nodeDragStartSubject = new Subject();
        this.nodeDragSubject = new Subject();
        this.nodeDragEndSubject = new Subject();
        this.nodeClick$ = this.nodeClickSubject.pipe(share());
        this.nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());
        this.nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());
        this.sceneRotation$ = this.sceneRotationSubject.pipe(share());
        this.nodeDragStart$ = this.nodeDragStartSubject.pipe(share());
        this.nodeDrag$ = this.nodeDragSubject.pipe(share());
        this.nodeDragEnd$ = this.nodeDragEndSubject.pipe(share());
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const props = Object.assign(Object.assign({}, deckProps), { views: [deckProps.camera === 'orthographic' ? new OrthographicView({
                    flipY: false,
                    near: -1000
                }) : new OrbitView({ orbitAxis: 'Y' })], controller: deckProps.interactive !== undefined ? deckProps.interactive : true, layers: [this.bodyUILayer], onHover: this._onHover, onClick: this._onClick, onViewStateChange: this._onViewStateChange, onDragStart: this._onDragStart, onDrag: this._onDrag, onDragEnd: this._onDragEnd, getCursor: (e) => { var _a; return (_a = this.cursor) !== null && _a !== void 0 ? _a : (e.isDragging ? 'grabbing' : 'grab'); } });
        if (deckProps.legacyLighting) {
            // eslint-disable-next-line
            props.effects = [
                new LightingEffect({
                    ambientLight: new AmbientLight({
                        color: [255, 255, 255],
                        intensity: 10.0
                    })
                })
            ];
        }
        // eslint-disable-next-line
        this.deck = new Deck(props);
        this.deck.setProps({
            viewState: {
                orbitAxis: 'Y',
                minRotationX: (_a = deckProps.minRotationX) !== null && _a !== void 0 ? _a : -15,
                maxRotationX: (_b = deckProps.maxRotationX) !== null && _b !== void 0 ? _b : 15,
                target: (_c = deckProps.target) !== null && _c !== void 0 ? _c : [0.5, 0.5, 0],
                rotationX: 0,
                rotationOrbit: (_d = deckProps.rotation) !== null && _d !== void 0 ? _d : 0,
                zoom: (_e = deckProps.zoom) !== null && _e !== void 0 ? _e : 9.5,
                camera: deckProps.camera
            }
        });
        if (deckProps.rotation) {
            this.sceneRotationSubject.next([deckProps.rotation, 0]);
        }
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            while (!this.bodyUILayer.state) {
                // eslint-disable-next-line no-await-in-loop
                yield new Promise(r => {
                    setTimeout(r, 200);
                });
            }
        });
    }
    finalize() {
        this.deck.finalize();
    }
    setScene(data) {
        if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
            let zoomOpacity = this.bodyUILayer.state.zoomOpacity;
            let didZoom = false;
            for (const node of data) {
                if (node.zoomToOnLoad) {
                    this.zoomTo(node);
                    didZoom = true;
                }
            }
            zoomOpacity = didZoom ? 0.05 : zoomOpacity;
            if (!this.deckProps.debugSceneNodeProcessing) {
                this.bodyUILayer.setState({ data, zoomOpacity });
            }
            else {
                this.debugSceneNodeProcessing(data, zoomOpacity);
            }
        }
    }
    debugSceneNodeProcessing(data, zoomOpacity) {
        // const gltfUrl = 'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Male/United/VHM_United_Color.glb';
        const gltfUrl = 'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Female/United/VHF_United_Color.glb';
        // const gltfUrl = 'https://hubmapconsortium.github.io/hubmap-ontology/objects/VHF_United_v01_060420.glb';
        const gltfTransform = new Matrix4([0.076, 0, 0, 0, 0, 0.076, 1.6875389974302382e-17, 0, 0, -1.6875389974302382e-17, 0.076, 0, 0.49, 0.034, 0.11, 1]);
        processSceneNodes(gltfUrl, gltfTransform, 'VHF_Kidney_L_Low1').then((results) => {
            console.log('results', results);
            console.log('data', data);
            // data = Object.values(results);
            data = data.concat(Object.values(results));
            data.push({
                '@id': 'TEST',
                '@type': 'TEST',
                scenegraph: gltfUrl,
                scenegraphNode: 'VHF_Kidney_R_Low',
                transformMatrix: gltfTransform,
                color: [255, 255, 255, 200],
                // eslint-disable-next-line @typescript-eslint/naming-convention
                _lighting: 'pbr',
                zoomBasedOpacity: false
            });
            this.bodyUILayer.setState({ data, zoomOpacity });
        });
    }
    zoomTo(node) {
        const matrix = new Matrix4(node.transformMatrix);
        this.deck.setProps({
            viewState: Object.assign(Object.assign({}, this.deck.props.viewState), { target: matrix.getTranslation(), rotationX: 0, rotationOrbit: 0, zoom: 11.5 })
        });
    }
    setRotation(value) {
        this.deck.setProps({
            viewState: Object.assign(Object.assign({}, this.deck.props.viewState), { rotationOrbit: value })
        });
    }
    setRotationX(value) {
        this.deck.setProps({
            viewState: Object.assign(Object.assign({}, this.deck.props.viewState), { rotationX: value })
        });
    }
    setZoom(value) {
        this.deck.setProps({
            viewState: Object.assign(Object.assign({}, this.deck.props.viewState), { zoom: value })
        });
    }
    setTarget(value) {
        this.deck.setProps({
            viewState: Object.assign(Object.assign({}, this.deck.props.viewState), { target: value })
        });
    }
    setInteractive(value) {
        this.deck.setProps({
            controller: value
        });
    }
    _onHover(e) {
        const { lastHovered } = this;
        this.cursor = e.picked ? 'pointer' : undefined;
        if (e.picked && e.object && e.object['@id']) {
            if (lastHovered !== e.object) {
                if (lastHovered) {
                    this.nodeHoverStopSubject.next(lastHovered);
                }
                this.lastHovered = e.object;
                this.nodeHoverStartSubject.next(e.object);
            }
        }
        else if (lastHovered) {
            this.nodeHoverStopSubject.next(lastHovered);
            this.lastHovered = undefined;
        }
    }
    _onClick(info, e) {
        var _a, _b;
        if (info.picked && info.object && info.object['@id']) {
            this.nodeClickSubject.next({ node: info.object, ctrlClick: (_b = (_a = e === null || e === void 0 ? void 0 : e.srcEvent) === null || _a === void 0 ? void 0 : _a.ctrlKey) !== null && _b !== void 0 ? _b : undefined });
        }
    }
    _onViewStateChange(event) {
        var _a;
        if ((_a = event.interactionState) === null || _a === void 0 ? void 0 : _a.isZooming) {
            const currentState = this.bodyUILayer.state;
            const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 2, 0.05), 1.0);
            if (currentState.zoomOpacity !== zoomOpacity) {
                this.bodyUILayer.setState({ data: currentState.data, zoomOpacity });
            }
        }
        this.deck.setProps({ viewState: Object.assign({}, event.viewState) });
        this.sceneRotationSubject.next([event.viewState.rotationOrbit, event.viewState.rotationX]);
    }
    _onDragStart(info, e) {
        this._dragEvent(info, e, this.nodeDragStartSubject);
    }
    _onDrag(info, e) {
        this._dragEvent(info, e, this.nodeDragSubject);
    }
    _onDragEnd(info, e) {
        this._dragEvent(info, e, this.nodeDragEndSubject);
    }
    _dragEvent(info, e, subject) {
        var _a;
        if ((_a = info === null || info === void 0 ? void 0 : info.object) === null || _a === void 0 ? void 0 : _a['@id']) {
            subject.next({ node: info.object, info, e });
        }
    }
}
__decorate([
    bind
], BodyUI.prototype, "_onHover", null);
__decorate([
    bind
], BodyUI.prototype, "_onClick", null);
__decorate([
    bind
], BodyUI.prototype, "_onViewStateChange", null);
__decorate([
    bind
], BodyUI.prototype, "_onDragStart", null);
__decorate([
    bind
], BodyUI.prototype, "_onDrag", null);
__decorate([
    bind
], BodyUI.prototype, "_onDragEnd", null);
//# sourceMappingURL=data:application/json;base64,